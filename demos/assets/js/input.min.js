(()=>{"use strict";const t=".input-text-container{display:flex;flex-direction:column}.input-text-container>.main-wrapper{display:flex;flex-direction:row;width:100%;height:auto;background-color:var(--background-color, #fcfcfc);border:1px solid var(--border-color, #e6e7e9);border-radius:.4rem;margin:0;padding:.35rem 0;padding-inline-start:0rem;padding-inline-end:0rem;transition:border 120ms ease-in-out;transition:background-color 120ms ease-in-out;z-index:2}:host{display:flex;flex-direction:column;min-width:10rem}:host *[class]{position:relative;font-family:inherit;color:inherit;box-sizing:border-box}.icon-container{display:flex;align-items:stretch;justify-content:stretch}.icon-container>slot[name=icon]{display:flex;align-items:stretch;justify-content:stretch;min-width:1rem}.icon-container>slot[name=icon]::slotted(span){display:flex;align-items:center;justify-content:center;font-size:1.5rem;width:2.5rem;color:var(--icon-color, #a6a6ab)}.indicator-container{display:flex;align-items:stretch;justify-content:stretch;text-decoration:none}.indicator-container>slot[name=indicator]{display:flex;align-items:stretch;justify-content:stretch;min-width:1rem}.indicator-container>slot[name=indicator]::slotted(span){display:flex;align-items:center;justify-content:center;font-size:1.5rem;width:2.5rem;color:var(--icon-color, #a6a6ab)}.indicator-container>slot[name=indicator]::slotted(.success){color:var(--success-color, #68ca8e)}.indicator-container>slot[name=indicator]::slotted(.info){color:var(--info-color, #62aeda)}.indicator-container>slot[name=indicator]::slotted(.danger){color:var(--danger-color, #dd8080)}.input-text-container .inner-container{width:100%;height:auto;padding:0;margin:0;display:flex;flex-direction:column}.input-text-container:focus-within .main-wrapper{border:1px solid var(--accent-color, #222)}:host([invalid]) .input-text-container .main-wrapper{border:1px solid var(--danger-color, #dd8080)}.label-container{width:100%;display:flex;flex-direction:row}.label-container>label{width:100%;line-height:1.2rem;font-size:.9rem;font-weight:500;color:var(--label-color, #a6a6ab);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;transform:translateY(0.75rem);transition:all 180ms ease-in-out;transform-origin:0% 100%}:host([invalid]) .label-container>label,:host([invalid]) .icon-container>slot[name=icon]::slotted(span){color:var(--danger-color, #dd8080)}.input-container{display:flex;flex-direction:column;align-items:stretch;justify-content:stretch}input[type=text]{width:100%;height:2.4rem;line-height:2.4rem;background-color:transparent;color:inherit;border:none;outline:none;font-size:1rem;border-radius:0;padding:0;font-weight:400}input[type=text]:hover,input[type=text]:focus,input[type=text]:active{border:none;outline:none}input[type=text]:placeholder-shown{font-size:1rem;opacity:.75;line-height:1.2rem;height:1.4rem}.has-label input[type=text]{line-height:1.4rem;height:1.6rem}.has-label input[type=text]:placeholder-shown{opacity:0;transition:opacity 180ms ease-in-out}.has-label input[type=text]:focus:placeholder-shown{opacity:.75}.has-value .label-container>label,.input-text-container:focus-within .label-container>label{transform:translateY(0) scale(0.8)}:host(:is(:not([invalid]))) .input-text-container:hover .label-container>label,:host(:is(:not([invalid]))).input-text-container:focus-within .label-container>label{color:var(--accent-color, #000)}.hints-container{display:flex;flex-direction:row;justify-content:space-between;margin-top:.2rem;z-index:1;overflow:hidden}.hints-container>slot{display:inline-block}.hints-container:empty{display:none}.hints-container>slot[name=hint]{transform:translateY(0);opacity:1}.hints-container>slot[name=errors]{transform:translateY(-1rem);opacity:0}:host(:is(:not([invalid]))) .hints-container>slot[name=errors],:host([invalid]) .hints-container>slot[name=hint]{transform:translateY(-1rem);opacity:0}:host(:is(:not([invalid]))) .hints-container>slot[name=hint],:host([invalid]) .hints-container>slot[name=errors]{transform:translateY(0rem);opacity:1}.hints-container>slot[name=hint],.hints-container>slot[name=errors]{font-size:.65rem;color:var(--label-color, #a6a6ab);font-weight:300;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:100%}.hints-container>slot[name=errors]::slotted([hidden]){display:none !important}.hints-container>slot[name=errors]::slotted(span){color:var(--danger-color, #dd8080)}.initialized .hints-container>slot{transition-property:transform,opacity;transition:180ms linear}",e=document.createElement("template");e.innerHTML='<div class="input-text-container pending-init" id="root-element"> <div class="main-wrapper"> <div class="icon-container" id="icon-container-element"> <slot name="icon" id="icon-slot"></slot> </div> <div class="inner-container" id="inner-container-element"> <div class="label-container" id="label-container-element"> <label for="input-element" id="label-element"> </label> </div> <div class="input-container"> <div class="input-holder"> <input type="text" name="input-element" class="input-element" id="input-element"/> </div> </div> </div> <div class="indicator-container" id="indicator-container-element"> <slot name="indicator" id="indicator-slot"></slot> </div> </div> <div class="hints-container" id="hints-container-element"> <slot name="errors" id="error-messages-slot"> </slot> <slot name="hint" id="hint-text-slot"> </slot> </div> </div>';const n="has-label",i="has-value",o={LABEL:"label",PLACEHOLDER:"placeholder",VALUE:"value"},a="change",r="click";class l extends HTMLElement{static get tagName(){return"vanilla-input"}$root;$innerContainer;$input;$labelContainer;$label;get value(){return this.$input.value||""}set value(t){this.$input&&(this.$input.value=t)}get label(){return this.getAttribute(o.LABEL)}set label(t){this.setAttribute(o.LABEL,t)}static get observedAttributes(){return Object.values(o)}constructor(){super(),this.attachShadow({mode:"open"})}attributeChangedCallback(t,e,n){this.attributeChanged(t,e,n)}attributeChanged(t,e,n){if(null!==e)switch(t){case o.LABEL:this.generateLabelElement(n);break;case o.VALUE:const e=new Event(a);this.$input?.setAttribute(t,n),this.$input?.dispatchEvent(e);break;default:this.$input?.setAttribute(t,n)}}connectedCallback(){this.init()}disconnectedCallback(){this.$input?.removeEventListener(a,this.eventChangedInputValue.bind(this)),this.$root?.removeEventListener(r,this.eventClickedToRoot.bind(this))}init(){const n=e.content.cloneNode(!0);this.$root=n.getElementById("root-element"),this.$innerContainer=n.getElementById("inner-container-element"),this.$input=n.getElementById("input-element"),this.$label=n.getElementById("label-element"),this.$labelContainer=n.getElementById("label-container-element"),this.$labelContainer.remove(),this.$input.addEventListener(a,this.eventChangedInputValue.bind(this)),this.$root.addEventListener(r,this.eventClickedToRoot.bind(this));const i=this.attributes;for(var o of i)this.attributeChanged(o.name,o.value,o.value);const l=document.createElement("style");if(l.styleSheet)l.styleSheet.cssText=t;else{const e=document.createTextNode(t);l.appendChild(e)}this.shadowRoot.appendChild(l),this.shadowRoot.appendChild(this.$root),this.$root.classList.remove("pending-init"),this.$root.classList.add("initialized")}generateLabelElement(t){Boolean(t)?(this.$root.classList.add(n),this.$innerContainer.insertBefore(this.$labelContainer,this.$innerContainer.firstChild),this.$labelContainer=this.$innerContainer.querySelector("#label-container-element"),this.$label=this.$innerContainer.querySelector("#label-element"),this.$label.innerHTML=t):(this.$root.classList.remove(n),this.$labelContainer.remove())}eventChangedInputValue(t){const e=t.target.value;Boolean(e)?this.$root.classList.add(i):this.$root.classList.remove(i)}eventClickedToRoot(t){t.preventDefault(),this.$input.focus()}}window.customElements.define(l.tagName,l)})();