/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/components/input.html":
/*!***********************************!*\
  !*** ./src/components/input.html ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Module\nvar code = \"<!-- TEMPLATE -->\\n<div \\n    class=\\\"input-text-container pending-init\\\" \\n    id=\\\"root-element\\\">\\n    <div class=\\\"main-wrapper\\\">\\n        <div \\n            class=\\\"icon-container\\\"\\n            id=\\\"icon-container-element\\\">\\n            <slot \\n                name=\\\"icon\\\"\\n                id=\\\"icon-slot\\\"></slot>\\n        </div>\\n        <div \\n            class=\\\"inner-container\\\" \\n            id=\\\"inner-container-element\\\">\\n            <div \\n                class=\\\"label-container\\\" \\n                id=\\\"label-container-element\\\">\\n                <label \\n                    for=\\\"input-element\\\" \\n                    id=\\\"label-element\\\">\\n                </label>\\n            </div>\\n            <div class=\\\"input-container\\\">\\n                <div class=\\\"input-holder\\\">\\n                    <input \\n                        type=\\\"text\\\" \\n                        name=\\\"input-element\\\"\\n                        class=\\\"input-element\\\" \\n                        id=\\\"input-element\\\"/>\\n                </div>\\n            </div>\\n        </div>\\n        <div\\n            class=\\\"indicator-container\\\"\\n            id=\\\"indicator-container-element\\\">\\n            <slot \\n                name=\\\"indicator\\\"\\n                id=\\\"indicator-slot\\\"></slot>\\n        </div>\\n    </div>    \\n    <div \\n        class=\\\"hints-container\\\"\\n        id=\\\"hints-container-element\\\">\\n        <slot \\n            name=\\\"errors\\\" \\n            id=\\\"error-messages-slot\\\">\\n        </slot>\\n        <slot \\n            name=\\\"hint\\\"\\n            id=\\\"hint-text-slot\\\">\\n        </slot>\\n    </div>\\n</div>\\n<!-- E:TEMPLATE -->\\n\\n<!-- STYLES -->\\n<style>\\n    :host { \\n        display: flex;\\n        flex-direction: column;\\n        min-width: 10rem;\\n    }\\n    :host *[class] {\\n        position: relative;\\n        font-family: inherit;\\n        color: inherit;\\n        box-sizing: border-box;\\n    }\\n    .input-text-container {\\n        display: flex;\\n        flex-direction: column;\\n    }\\n    .input-text-container > .main-wrapper {\\n        display: flex;\\n        flex-direction: row;\\n        width: 100%;\\n        height: auto;\\n        background-color: var(--background-color, #fcfcfc);\\n        border: 1px solid var(--border-color, #e6e7e9);\\n        border-radius: .4rem;\\n        margin: 0;\\n        padding: .35rem 0;\\n        padding-inline-start: 0rem;\\n        padding-inline-end: 0rem;\\n        transition: border 120ms ease-in-out;\\n        transition: background-color 120ms ease-in-out;\\n        z-index: 2;\\n        \\n    }\\n\\n    .icon-container {\\n        display: flex;\\n        align-items: stretch;\\n        justify-content: stretch;\\n    }\\n    .icon-container > slot[name=\\\"icon\\\"] {\\n        display: flex;\\n        align-items: stretch;\\n        justify-content: stretch;\\n        min-width: 1rem;\\n    }\\n    .icon-container > slot[name=\\\"icon\\\"]::slotted(span) {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        font-size: 1.5rem;\\n        width: 2.5rem;\\n        color: var(--icon-color, #a6a6ab);\\n    }\\n\\n    .indicator-container {\\n        display: flex;\\n        align-items: stretch;\\n        justify-content: stretch;\\n        text-decoration: none;\\n    }\\n    .indicator-container > slot[name=\\\"indicator\\\"] {\\n        display: flex;\\n        align-items: stretch;\\n        justify-content: stretch;\\n        min-width: 1rem;\\n    }\\n    .indicator-container > slot[name=\\\"indicator\\\"]::slotted(span) {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        font-size: 1.5rem;\\n        width: 2.5rem;\\n        color: var(--icon-color, #a6a6ab);\\n    }\\n    .indicator-container > slot[name=\\\"indicator\\\"]::slotted(.success) {\\n        color: var(--success-color, #68ca8e);\\n    }\\n    .indicator-container > slot[name=\\\"indicator\\\"]::slotted(.info) {\\n        color: var(--info-color, #62aeda);\\n    }\\n    .indicator-container > slot[name=\\\"indicator\\\"]::slotted(.danger) {\\n        color: var(--danger-color, #dd8080);\\n    }\\n    \\n    .input-text-container .inner-container {\\n        width: 100%;\\n        height: auto;\\n        padding: 0;\\n        margin: 0;\\n        display: flex;\\n        flex-direction: column;\\n    }\\n\\n    .input-text-container:focus-within .main-wrapper {\\n        border: 1px solid var(--accent-color, #ffbeab);\\n        /*background-color: var(--accent-background-color, #f9f7fc);*/\\n    }\\n    :host([invalid]) .input-text-container .main-wrapper {\\n        border: 1px solid var(--danger-color, #dd8080);\\n    }\\n\\n    .label-container {\\n        width: 100%;\\n        display: flex;\\n        flex-direction: row;\\n    }\\n    .label-container > label {\\n        width: 100%;\\n        line-height: 1.2rem;\\n        font-size: .9rem;\\n        font-weight: 500;\\n        color: var(--label-color, #a6a6ab);\\n        white-space: nowrap; \\n        overflow: hidden;\\n        text-overflow: ellipsis;\\n        transform: translateY(.75rem);\\n        transition: all 180ms ease-in-out;\\n        transform-origin: 0% 100%;\\n    }\\n    :host([invalid]) .label-container > label,\\n    :host([invalid]) .icon-container > slot[name=\\\"icon\\\"]::slotted(span) { \\n        color: var(--danger-color, #dd8080);\\n    }\\n\\n     /** INPUT **/\\n    .input-container {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: stretch;\\n        justify-content: stretch;\\n    }\\n    input[type=\\\"text\\\"] {\\n        width: 100%;\\n        height: 2.4rem;\\n        line-height: 2.4rem;\\n        background-color: transparent;\\n        color: inherit;\\n        border: none;\\n        outline: none;\\n        font-size: 1rem;\\n        border-radius: 0;\\n        padding: 0;\\n        font-weight: 400;\\n    }\\n    input[type=\\\"text\\\"]:hover,\\n    input[type=\\\"text\\\"]:focus,\\n    input[type=\\\"text\\\"]:active {\\n        border: none;\\n        outline: none;\\n    }\\n    input[type=\\\"text\\\"]:placeholder-shown {\\n        font-size: 1rem;\\n        opacity: .75;\\n        line-height: 1.2rem;\\n        height: 1.4rem;\\n    }\\n    .has-label input[type=\\\"text\\\"] {\\n        line-height: 1.4rem;\\n        height: 1.6rem;\\n    }\\n    .has-label input[type=\\\"text\\\"]:placeholder-shown {\\n        opacity: 0;\\n        transition: opacity 180ms ease-in-out;\\n    }\\n    .has-label input[type=\\\"text\\\"]:focus:placeholder-shown {\\n        opacity: .75;\\n    }\\n    .has-value .label-container > label,\\n    .input-text-container:focus-within .label-container > label {\\n        transform: translateY(0) scale(.8);\\n    }\\n    :host(:is(:not([invalid]))) .input-text-container:hover .label-container > label,\\n    :host(:is(:not([invalid]))).input-text-container:focus-within .label-container > label {\\n        color: var(--accent-color, #000);\\n    }\\n\\n    /** HINTS **/\\n    .hints-container {\\n        display: flex;\\n        flex-direction: row;\\n        justify-content: space-between;\\n        /* height: .75rem; */\\n        margin-top: .2rem;\\n        z-index: 1;\\n        overflow: hidden;\\n    }\\n    .hints-container > slot {\\n        display: inline-block;\\n    }\\n    .hints-container:empty {\\n        display: none;\\n    }\\n    .hints-container > slot[name=\\\"hint\\\"] {\\n        transform: translateY(0);\\n        opacity: 1;\\n    }\\n    .hints-container > slot[name=\\\"errors\\\"] {\\n        transform: translateY(-1rem);\\n        opacity: 0;\\n    }\\n\\n    /** :host[invalid] */\\n    :host(:is(:not([invalid]))) .hints-container > slot[name=\\\"errors\\\"],\\n    :host([invalid]) .hints-container > slot[name=\\\"hint\\\"] {\\n        transform: translateY(-1rem);\\n        opacity: 0;\\n    }\\n    :host(:is(:not([invalid]))) .hints-container > slot[name=\\\"hint\\\"],\\n    :host([invalid]) .hints-container > slot[name=\\\"errors\\\"] {\\n        transform: translateY(0rem);\\n        opacity: 1;\\n    }\\n\\n    .hints-container > slot[name=\\\"hint\\\"],\\n    .hints-container > slot[name=\\\"errors\\\"] {\\n        font-size: .65rem;\\n        color: var(--label-color, #a6a6ab);\\n        font-weight: 300;\\n        white-space: nowrap; \\n        overflow: hidden;\\n        text-overflow: ellipsis;\\n        max-width: 100%;\\n    }\\n    .hints-container > slot[name=\\\"errors\\\"]::slotted([hidden]) {\\n        display: none !important;\\n    }\\n    .hints-container > slot[name=\\\"errors\\\"]::slotted(span) {\\n        color: var(--danger-color, #dd8080);\\n    }\\n    .initialized .hints-container > slot {\\n        transition-property: transform, opacity;\\n        transition: 180ms linear;\\n    }\\n</style>\\n<!-- E:STYLES -->\";\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (code);\n\n//# sourceURL=webpack://vanilla-web-components/./src/components/input.html?");

/***/ }),

/***/ "./src/components/input.js":
/*!*********************************!*\
  !*** ./src/components/input.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _input_html__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./input.html */ \"./src/components/input.html\");\n\n\n/**\n * Template contents.\n * @var {HTMLElement} template\n */\nconst template = document.createElement('template');\ntemplate.innerHTML = _input_html__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n\n/**\n * CSS classes name.\n * @property {string} HAS_LABEL     - Element has a label.\n * @property {string} HAS_VALUE     - Input contains truly value.\n * @property {string} HAS_ICON      - slot[name='icon'] has any element.\n * @property {string} INIT          - Element init completed.\n * @property {string} PENDING_INIT  - Element not initialized yet.\n * @readonly\n */\nconst CLASS = {\n    HAS_LABEL: 'has-label',\n    HAS_VALUE: 'has-value',\n    PENDING_INIT: 'pending-init',\n    INIT: 'initialized'\n}\n\n/**\n * Custom component attribues.\n * @property {string} LABEL - Label attribute alias.\n * @readonly\n */\nconst ATTRS = {\n    LABEL: 'label',\n    PLACEHOLDER: 'placeholder',\n    VALUE: 'value'\n}\n\n/**\n * Event list.\n * @property {string} CHANGE - Change event alias.\n * @property {string} CLICK  - Click event alias.\n * @readonly\n */\n const EVENTS = {\n     CHANGE: 'change',\n     CLICK: 'click',\n     SLOT_CHANGE: 'slotchange'\n}\n\n/**\n * Custom text input element class.\n * HTML tags is <vanilla-input>\n * \n * @class\n * @extends {HTMLElement}\n * @constructor\n */\nclass VanillaInput extends HTMLElement {\n\n    /**\n     * Tag name of VanillaInput\n     * @property {string} tagName\n     * @static\n     */\n    static get tagName() {\n        return 'vanilla-input';\n    }\n    \n    /**\n     * Style tag element in template.\n     * @property {CSSStyleSheet} $style\n     * @public\n     */\n    $style; \n\n    /**\n     * ID #root-element in template.\n     * @property {HTMLElement} $root\n     * @public\n     */\n    $root;\n\n    /**\n     * ID #inner-container-element in template.\n     * @property {HTMLElement} $innerContainer\n     * @public\n     */\n    $innerContainer;\n\n    /**\n     * ID #input-element in template.\n     * @property {HTMLElement} $input\n     * @input\n     */\n    $input;\n\n    /**\n     * ID #label-container-element in template.\n     * @property {HTMLElement} $labelContainer\n     * @public\n     */\n    $labelContainer;\n\n    /**\n     * ID #label-element in template.\n     * @property {HTMLElement} $label\n     * @public\n     */\n    $label;\n    \n    /**\n     * Get current value.\n     * @return {string}\n     */\n    get value() {\n        return this.$input.value || '';\n    }\n\n    /**\n     * Set value.\n     * @return {void} \n     */\n    set value(val) {\n        if(this.$input) \n            this.$input.value = val;\n    }\n\n    /**\n     * Get label property value.\n     * @return {string}\n     */\n    get label() {\n        return this.getAttribute(ATTRS.LABEL);\n    }\n\n    /**\n     * Set label property value.\n     * @param {string} value\n     * @return {void}\n     */\n    set label(value) {\n        this.setAttribute(ATTRS.LABEL, value);\n    }\n\n    static get observedAttributes() {\n        return Object.values(ATTRS);\n    }\n    \n    constructor() {\n        super();\n        this.attachShadow({ mode: 'open', composed: true });\n    }\n\n    /**\n     * Invoked when change/update attriubtes that defined\n     * at observedAttributes() function.\n     * \n     * @param {string} name     - Attribute name.\n     * @param {string} value    - Attribute current value.\n     * @param {string} newValue - Attribute updated value.\n     * @return {void}\n     */\n    attributeChangedCallback(name, value, newValue) {\n        this.attributeChanged(name, value, newValue);\n    }\n\n    /**\n     * Helper function that called by init() and \n     * attributeChangedCallback().\n     * \n     * @param {string} name     - Attribute name.\n     * @param {string} value    - Attribute current value.\n     * @param {string} newValue - Attribute updated value.\n     * @return {void}\n     */\n     attributeChanged(name, value, newValue) {\n        \n        if(value === null) return;\n\n        switch(name) {\n            case ATTRS.LABEL:\n                // Invoke when change label attr/property value.\n                this.generateLabelElement(newValue);\n            break;\n\n            case ATTRS.VALUE:\n                // Dispatch change event with fake event.\n                const fakeEvent = new Event(EVENTS.CHANGE);\n                this.$input?.setAttribute(name, newValue);\n                this.$input?.dispatchEvent(fakeEvent);\n            break;\n\n            default:\n                this.$input?.setAttribute(name, newValue);\n        }\n    }\n\n    connectedCallback() {\n        this.init();\n    }\n\n    disconnectedCallback() {\n\n        this.$input?.removeEventListener(\n            EVENTS.CHANGE, \n            this.eventChangedInputValue.bind(this)\n        );\n        this.$root?.removeEventListener(\n            EVENTS.CLICK,\n            this.eventClickedToRoot.bind(this)\n        );\n    }\n\n    init() {\n\n        const clondedTemplate = template.content.cloneNode(true);\n        \n        // Access cloned DOM elements.\n        this.$style = clondedTemplate.querySelector('style');\n        this.$root = clondedTemplate.getElementById('root-element');\n        this.$innerContainer = clondedTemplate.getElementById('inner-container-element');\n        this.$input = clondedTemplate.getElementById('input-element');\n        this.$label = clondedTemplate.getElementById('label-element');\n        this.$labelContainer = clondedTemplate.getElementById('label-container-element');\n        this.$labelContainer.remove();\n\n        // Attach events.\n        this.$input.addEventListener(\n            EVENTS.CHANGE, \n            this.eventChangedInputValue.bind(this)\n        );\n        this.$root.addEventListener(\n            EVENTS.CLICK,\n            this.eventClickedToRoot.bind(this)\n        );\n        \n        const initialAttributes = this.attributes;\n        for(var node of initialAttributes) {\n            this.attributeChanged(node.name, node.value, node.value);\n        }\n\n        this.shadowRoot.appendChild(this.$style);\n        this.shadowRoot.appendChild(this.$root);\n\n        this.$root.classList.remove(CLASS.PENDING_INIT);\n        this.$root.classList.add(CLASS.INIT);\n    }\n\n    /**\n     * Update label container element state.\n     * If value is falsy remove label conatiner\n     * in root.\n     * \n     * @param {string} value - Label text value.\n     * @returns {void}\n     */\n    generateLabelElement(value) {\n\n        if(Boolean(value)) {\n\n            this.$root.classList.add(CLASS.HAS_LABEL);\n            this.$innerContainer.insertBefore(\n                this.$labelContainer,\n                this.$innerContainer.firstChild\n            );\n\n            this.$labelContainer = this.$innerContainer\n                .querySelector('#label-container-element');\n            this.$label = this.$innerContainer\n                .querySelector('#label-element');\n            this.$label.innerHTML = value;    \n        }\n        else {\n            this.$root.classList.remove(CLASS.HAS_LABEL);\n            this.$labelContainer.remove();\n        }\n    }\n    \n    /**\n     * Invoked when input value change.\n     * If input has any content, add HAS_VALUE class\n     * to container element.\n     * \n     * @param {Event} $event \n     * @return {void}\n     */\n    eventChangedInputValue($event) {\n\n        const value = $event.target.value;\n        Boolean(value) ? \n            this.$root.classList.add(CLASS.HAS_VALUE) : \n            this.$root.classList.remove(CLASS.HAS_VALUE);\n    }\n\n    /**\n     * Invoked run when click to root element.\n     * Focus to input element.\n     * \n     * @param {Event} $event \n     * @return {void}\n     */\n    eventClickedToRoot($event) {\n        $event.preventDefault();\n        this.$input.focus();\n    }\n}\n//\nwindow.customElements.define(VanillaInput.tagName, VanillaInput);\n\n//# sourceURL=webpack://vanilla-web-components/./src/components/input.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/components/input.js");
/******/ 	
/******/ })()
;